{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week4.md?vue&type=template&id=3283b435&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/vr/Week4.md","mtime":1601965726610},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJ3aGlza2Vycy1pbi10aGUtZGFyayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hpc2tlcnMtaW4tdGhlLWRhcmsiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBXaGlza2VycyBpbiB0aGUgRGFyayIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvciBvdXIgZ3JvdXAgcHJvamVjdDogV2hpc2tlcnMgaW4gdGhlIGRhcmssIEkgc2VydmVkIHRoZSByb2xlcyBhbmQgUHJvZHVjZXIsIENyZWF0aXZlIERpcmVjdG9yLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgd29ya2VkIGZvciBhbiBhZHZlcnRpc2luZyBhZ2VuY3kgYXMgYSBkZXNpZ25lci4gSGVyZSwgd2hlbiBJIHdhcyBjb21tdW5pY2F0aW5nIHdpdGggbXkgYWNjb3VudCBtYW5hZ2VyLCBJIGNhbiBzZW5zZSB0aGUgcHJlc3N1cmUgdGhleSB3ZXJlIGV2ZXJ5IHByb2plY3QgZnJvbSBib3RoIHNpZGVzOiBjbGllbnRzIGFuZCB1cy4gQ2xpZW50cyB1c3VhbGx5IGhhdmUgYSB2ZXJ5IGhhcnNoIGRlYWRsaW5lLCBhbmQgdGhlbiB0aGUgYWNjb3VudCBtYW5hZ2VyIGNvbW11bmljYXRlcyB3aXRoIHVzIHRvIG1ha2Ugc3VyZSB3ZSBjYW4gZ2V0IGV2ZXJ5dGhpbmcgZG9uZSBpbiB0aW1lLiBUaGlzIHBvc2l0aW9uIHJlcXVpcmVzIHN0cm9uZyBpbnRlcnBlcnNvbmFsIGNvbW11bmljYXRpb25zIGFuZCBtYW5hZ2Ugc3R1ZmYgaW4gZGV0YWlsLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkluIHRoaXMgcHJvamVjdCBhcyBhIHJvbGUgYXMgUHJvZHVjZXIsIEkgZmVlbCBpdCBpcyBhYm91dCB0aGUgc2FtZS4gQWx0aG91Z2ggd2UgZG9uJ3QgaGF2ZSBhIGNsaWVudCwgdGhlIHByZXNzdXJlIGlzIGZyb20gbXkgcGVlcnMuIFRoZSB0YXNrIGlzIHRvIGNyZWF0ZSBhIHRhbmdpYmxlLCBtYW5hZ2VhYmxlIHRpbWUgcGxhbi4gQWx0aG91Z2ggd2UgZG9uJ3QgaGF2ZSB0byBhY3R1YWxseSBtYWtlIHRoaW5ncyByZWFsLCBpdCBkb2VzIHNlZW0gdmVyeSBjaGFubmVsaW5nLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIk91dHNpZGUgYXMgUHJvZHVjZXIsIEkgdG9vayBzb21lIGpvYnMgYXMgYSBkZXNpZ25lci4gSSBkb24ndCB3YW50IHRvIHNvdW5kIGNvY2t5LCBidXQgSSBhbSBjb25maWRlbnQgdGhhdCBJIGNvdWxkIG1ha2Ugc2xpZGVzIGxvb2tzIG5pY2UuIFNvIHdoZW4gYWxsIG9mIG15IGdyb3VwIG1lbWJlcnMganVzdCBsYXkgdGhlIGNvbnRlbnQgZmxhdCBhcyB0ZXh0LCBJIHdlbnQgYmFjayBhbmQgcGlja2VkIHVwIGV2ZXJ5dGhpbmcgdG8gbWFrZSBzdXJlIGl0IGhhcyB1bmlxdWUgYW5kIHVuaWZvcm0gdmlzdWFsIHNldHRpbmdzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkkgYWxzbyBkcmF3IHRoZSBpbGx1c3RyYXRpb24gb2YgdGhlIGJsYWNrIGNhdCBvbiBteSBpUGFkIHdpdGggUHJvY3JlYXRlLiBJIGVuam95ZWQgZG9pbmcgdGhpcyBkaWdpdGFsIGFydCBmb3IgbXkgZ3JvdXAsIGFsc28gYXMgYSBnZW5lcmFsIGRlc2lnbiBwcmFjdGljZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvSU1HXzYyMTM5QjFEN0UxNC0xLmpwZWciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRmluYWxseSwgYmFjayB0byB0aGUgbWFpbiB0b3BpYy4gT3VyIHRpbWVsaW5lIGhhcyBiZWVuIHNlcGFyYXRlZCBhcyBmb3IgZGlmZmVyZW50IHBoYXNlczoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJCcmFpbnN0b3JtaW5nLCBOYXJyYXRpdmUsIEZvdW5kYXRpb24iKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdhdGhlcmluZyBBcnQgQXNzZXRzIGFuZCBzZXR0aW5nIHRoZSBnYW1lIGxvZ2ljcyIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgW192bS5fdigiUHJvZHVjdGlvbiBhbmQgRGV2ZWxvcG1lbnQiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkdhbWUgUmVsZWFzZSBhbmQgTWFya2V0aW5nIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvMjAyMDEwMDYwMTI1MTcucG5nIiwKICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgfQogICAgICAgIH0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJFYWNoIHBoYXNlIGFuZCBpbmRpdmlkdWFsIHdlZWtseSB0aW1lbGluZToiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy8yMDIwMTAwNjAxMjc0MS5wbmciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiSW4gdGhlIGVuZCwgSSBhbHNvIGFkZGVkIHRoZSBwbGF0Zm9ybSB3ZSB3aWxsIGJlIHJlbGVhc2luZyBvdXIgcHJvZHVjdCB0b+KAlGV4bWFwbGUgbGlrZSBPY3VsdXMgU3RvcmUgYW5kIFBTVlIgU3RvcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vaXJ3aW5jaHlpL2ltZ2JlZC9tYXN0ZXIvaW1nLzIwMjAxMDA2MDEyODEwLnBuZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDaGVzdGVyIGpvaW5lZCBvdXIgZ3JvdXAgbWVldGluZzsgaXQncyB2ZXJ5IGVhcmx5IGluIHRoZSBtb3JuaW5nIGluIENoaW5hLiBJIHZlcnkgbXVjaCBhcHByZWNpYXRlIGhpcyBlZmZvcnRzLiAoSSBkZWZpbml0ZWx5IGNhbid0IGdldCB1cCB0aGF0IGVhcmx5KSBJIHJlY29yZGVkIHRoZSBab29tIG1lZXRpbmcgYW5kIGNyb3BwZWQgdGhlIHZpZGVvIGFib3V0IGhpbSBleHBsYWluaW5nIHRoZSBpZGVhIGFzIGEgcHJvZ3JhbW1lci4gVGhpcyB2aWRlbyB3aWxsIGJlIHBsYXllZCBkdXJpbmcgb3VyIHByZXNlbnRhdGlvbnMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT3VyIGdyb3VwIGRpZCBhbiBhbWF6aW5nIGpvYiBhbmQgY2FtZSB1cCB3aXRoIGFuIGFtYXppbmcgaWRlYS4gSSBhbSB2ZXJ5IGV4Y2l0ZWQgYWJvdXQgdGhlIHByZXNlbnRhdGlvbiB0b21vcnJvd34iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}