{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week5.md?vue&type=template&id=65daa694&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/nyu/IandP/Week5.md","mtime":1602525995702},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1600070946946},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":1600070943974},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":1600070946945},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":1600070943655}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}