{"remainingRequest":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/wqi3/Documents/GitHub/html/docs/NYU/UX/Navigo.md?vue&type=template&id=044f150e&","dependencies":[{"path":"/Users/wqi3/Documents/GitHub/html/docs/NYU/UX/Navigo.md","mtime":1596745492966},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/wqi3/Documents/GitHub/html/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJuYXZpZ28taXJ3aW4tcy1wZXJzb25hbC11eC1wcm9qZWN0IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNuYXZpZ28taXJ3aW4tcy1wZXJzb25hbC11eC1wcm9qZWN0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgTmF2aWdvIOKAlOKAlCBJcndpbidzIFBlcnNvbmFsIFVYIFByb2plY3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY3VzdG9tLWJsb2NrIHRpcCIgfSwgWwogICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogImN1c3RvbS1ibG9jay10aXRsZSIgfSwgWwogICAgICAgICAgX3ZtLl92KCJQcm9qZWN0IFVwZGF0ZXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJwIiwgW192bS5fdigiSW50ZXJ2aWV3ZWQgd2l0aCAzIGJsaW5kIHVzZXJzIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygicCIsIFtfdm0uX3YoIldvcmtpbmcgb24gU2tldGNoIGZpbGVzIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJza2V0Y2gteW91ci1zb2x1dGlvbi1vbi1wYXBlciIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjc2tldGNoLXlvdXItc29sdXRpb24tb24tcGFwZXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBTa2V0Y2ggeW91ciBTb2x1dGlvbiBvbiBwYXBlciIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzoKICAgICAgICAgICAgICAiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2lyd2luY2h5aS9pbWdiZWQvbWFzdGVyL2ltZy9Ta2V0Y2glMjAxLmpwZyIsCiAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgIH0KICAgICAgICB9KQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzcmM6CiAgICAgICAgICAgICAgImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9pcndpbmNoeWkvaW1nYmVkL21hc3Rlci9pbWcvU2tldGNoMi5qcGciLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaGlnaC1hbmQtbG93LWRlZmluaXRpb24tc2tldGNoLXByb2plY3QiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2hpZ2gtYW5kLWxvdy1kZWZpbml0aW9uLXNrZXRjaC1wcm9qZWN0IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSGlnaCBhbmQgTG93IERlZmluaXRpb24gU2tldGNoIFByb2plY3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6CiAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuc2tldGNoLmNvbS9zLzUxZGUyZjY0LTYyZTUtNDlhZS05MDJiLWMzZmE2M2QzOGI5MyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiU2tldGNoIENsb3VkIEZpbGUiKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBsZWFzZSBjbGljayBsaW5rIGFib3ZlIHRvIHNlZSBsYXRlc3QgY2hhbmdlcyBvbiBteSBTa2V0Y2ggY29udGVudCIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgyIiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiY3JlYXRlLWludGVydmlldy1xdWVzdGlvbnMtYXJvdW5kLXlvdXItcHJvamVjdCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY3JlYXRlLWludGVydmlldy1xdWVzdGlvbnMtYXJvdW5kLXlvdXItcHJvamVjdCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgQ3JlYXRlIGludGVydmlldyBxdWVzdGlvbnMgYXJvdW5kIHlvdXIgcHJvamVjdCIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZpbmQtMy1wZW9wbGUtdG8taW50ZXJ2aWV3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNmaW5kLTMtcGVvcGxlLXRvLWludGVydmlldyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEZpbmQgMyBwZW9wbGUgdG8gaW50ZXJ2aWV3IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygic3Ryb25nIiwgW192bS5fdigiTG9nIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJDb250YWN0IHdpdGg6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPdXRsb29rIE5lYnJhc2thIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aGljaCBpcyBub24tcHJvZml0IG9yZ2FuaXphdGlvbiBwcm92aWRpbmcgam9iIG9wcG9ydHVuaXRpZXMgZm9yIGV2ZXJ5b25lIHdobyBpcyBibGluZCBhbmQgdmlzdWFsbHkgaW1wYWlyZWQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQ29udGFjdDogRG9ubmEuIExlZnQgYSB2b2ljZW1haWwgd2FpdGluZyBmb3IgaGVhciBiYWNrIGZyb20gdGhlbS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJVTkwgU1NEIE9mZmljZSIpXSksCiAgICAgICAgX3ZtLl92KCIsIGVtYWlsZWQsIHdhaXRpbmcuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiT21haGEgQXNzb2NpYXRpb24gb2YgQmxpbmQiKV0pLAogICAgICAgIF92bS5fdigiLCBsZWZ0IGEgdm9pY2VtYWlsLiBXYWl0aW5nIGZvciBjYWxsIGJhY2suIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiaW50ZXJ2aWV3IiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNpbnRlcnZpZXciIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIEludGVydmlldyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogImludGVydmlldy1nb2FsIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNpbnRlcnZpZXctZ29hbCIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgSW50ZXJ2aWV3IEdvYWwiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJVbmRlcnN0YW5kIHRoZWlyIHBhaW4gcG9pbnRzIHdoaWxlIHVzaW5nIG9ubGluZSBzZWFyY2ggc2VydmljZXMuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkFzayB0aGVpciB0aG91Z2h0IGFib3V0IGNvbW11bml0eSByZXNvdXJjZXMiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiaW50ZXJ2aWV3LXF1ZXN0aW9ucy1hbmQtcmVzcG9uc2UtaW50ZXJ2aWV3ZWUtZ3VzIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjaW50ZXJ2aWV3LXF1ZXN0aW9ucy1hbmQtcmVzcG9uc2UtaW50ZXJ2aWV3ZWUtZ3VzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEludGVydmlldyBRdWVzdGlvbnMgYW5kIFJlc3BvbnNlLCBJbnRlcnZpZXdlZTogR3VzIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAiaDUiLAogICAgICAgIHsgYXR0cnM6IHsgaWQ6ICJ0dHMtc2NyZWVuLXJlYWRlci1hbmQtYWNjZXNzaWJpbGl0eS1mdW5jdGlvbnMiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3R0cy1zY3JlZW4tcmVhZGVyLWFuZC1hY2Nlc3NpYmlsaXR5LWZ1bmN0aW9ucyIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgVFRTL1NjcmVlbiBSZWFkZXIgYW5kIGFjY2Vzc2liaWxpdHkgZnVuY3Rpb25zIikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldoaWNoIFRUUyBhcmUgeW91IGN1cnJlbnRseSB1c2luZz8gVm9pY2VvdmVyIG9yIGFueSBhZGRpdGlvbmFsIHByb2dyYW0/IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJWb2ljZW92ZXIgd2hlbiBpT1MsIG1hY09TLCBBcHBsZSBUViwgSkFXUyB3aW5kb3dzIGZvciBwcm9kdWN0aXZpdHksIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigiUHJlZmVyIGlQaG9uZSwgbW9zdCBzdGFibGUgcG9ydGFibGUgb3BlcmF0aW5nIHN5c3RlbS4iKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIkhvdyBkbyB5b3UgZ2V0IG5ld3MsIHBvZGNhc3Qgb3IgVFRTIG9yIGJvdGg/IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJOb3QgcG9kY2FzdCBwZXJzb24sIGp1c3QgdXNlIHNjcmVlbnJlYWRlciwgZ28gdG8gd2Vic2l0ZSwgcmVhZCBhcnRpY2xlcy4gRG9uJ3QgbGlzdGVuIHRvIHBvZGNhc3QuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJEb2VzIHRoZSBzY3JlZW5yZWFkZXIgcmVhZCBhIGxvdCBpcnJlbGV2YW50IGNvbnRlbnQgb24gdGhlIHBhZ2UgYW5kIGhvdyBkbyB5b3UgYXZvaWQgdGhhdD8iCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkltcG9zc2libGUgdG8gYXZvaWQgdGhlIGlycmVsZXZhbnQgY29udGVudCwgdGVjaG5pcXVlIHNraXBwaW5nIHRoZSBhZHZlcnRpc2VtZW50LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkl0IHRha2VzIHNvbWUgd29yayB0byBleHBsb3JlIHdoYXQgaGlzIHdhbnQgb3IgZG9lc24ndCB3YW50LiIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIldlYnNpdGU6IEZsYXNoIGVuYWJsZSwgYWR2ZXJ0aXNpbmcsIHNjcmVlbiByZWFkZXIga2VlcCBzdHVjay4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIkl0IGNhbiBiZSByZWFsbHkgZnJ1c3RyYXRpbmcsIHRvbyBzdHJlc3NmdWwuIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJGb2xsb3cgdXA6IEZvciBhdmVyYWdlIGxlbmd0aCBhcnRpY2xlIHlvdSByZWFkIG9ubGluZSwgaG93IG11Y2ggY29udGVudHMgaXMgaXJyZWxldmFudCAobGlrZSBkaWdpdGFsIGFkcyk/IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIlJhbmdlIHRvIDIwIHRvIDMwIHBlcmNlbnQuIFNvbWV0aW1lcyBtb3JlIHRoYW4uIildKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJEbyB5b3UgdXNlIHJlYWRlciBtb2RlIG9uIHlvdXIgQ2hyb21lIG9yIFNhZmFyaSB0byBmaWx0cmF0ZSBkaWdpdGFsIGFkcyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIj8iKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJwIiwgW192bS5fdigiRG9uJ3QuIFNhZmFyaSBpcyBub3QgcHJlZmVyIGJyb3dzZXJzLiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoNSIsIHsgYXR0cnM6IHsgaWQ6ICJyZWFkaW5nLWFuZC1vbmxpbmUtcmVzb3VyY2VzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZWFkaW5nLWFuZC1vbmxpbmUtcmVzb3VyY2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVhZGluZyBhbmQgb25saW5lIHJlc291cmNlcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJIb3cgZG8geW91IGZpbmQgbmV3IG9ubGluZSByZXNvdXJjZXMgd2hpY2ggb3B0aW1pemVkIGZvciBibGluZCBwZW9wbGU/IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJHb29nbGUgaXQsIHRoZXJlIGlzIG5vIHJlYWwgd2F5IHRvIHRlbGwgaWYgaXQncyBzY3JlZW5yZWFkZXIuIExvb2tpbmcgZm9yIGFuIGFsdGVybmF0aXZlLiBVc2UgdGhlaXIgbW9iaWxlIHNpdGUgYW5kIG9wdGltaXplZCBmb3Igc2NyZWVuIHJlYWRpbmcuIEFtYXpvbi5jb20sIGFtYXpvbi5jb20vYWNlc3MsIG0uZmFjZWJvb2suY29tLiBhdWRpYmxlLmNvbS9hY2Vzcy4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJCZWZvcmUgdGhlIHNtYXJ0IHdpdGggYXBwcyBjYW1lIG91dCwgcGVvcGxlIGhhdmUgd2ViIGJyb3dzZXIgdG8gdXNlIHRvbyBtdWNoIGRhdGEsIHNjYWxlIGRvd24gdmVyc2lvbi4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldoaWNoIHBhcnQgb2YgR29vZ2xlIFNlYXJjaCBlbmdpbmUgeW91IGRvbid0IGxpa2U/IEV4YW1wbGVzIGxpa2UgYWRzPyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV2Vic2l0ZSwgbm90IGNvZGVkIHByb3Blcmx5LiBOb3QgcmVhZCBpdCB3ZWxsLiBUaGVyZSBpcyBubyBjb25zaXN0ZW5jeS4gSSBkb24ndCBrbm93IHdoYXQgdG8gZXhwZWN0IHRvIGdvIHRvIGEgbmV3IHdlYnNpdGUuIgogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg1IiwgeyBhdHRyczogeyBpZDogImNvbW11bml0eSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY29tbXVuaXR5IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBDb21tdW5pdHkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiSW4gd2hpY2ggY2hhbm5lbCwgeW91IHJlY29tbWVuZC9zaGFyZSBtb3ZpZXMsIG11c2ljLCBUViBzaG93cyBhbmQgb25saW5lIHJlc291cmNlcyBtZW50aW9uZWQgYmVmb3JlIHRvIG90aGVyIHBlb3BsZSB3aG8gaXMgaGFzIHZpc2lvbiBkaXNhYmlsaXRpZXM/IgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJUZXh0LCBlbWFpbCwgcGhvbmUgY2FsbC4gTW9zdCBibGluZCBwZW9wbGUsIHNoYXJlIGluZm9ybWF0aXZlIGJhY2sgYW5kIGZvcnRoLiIKICAgICAgICAgICAgKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiRG8geW91IHVzZSBhbnkgb25saW5lIGNvbW11bml0eSwgbGlrZSBGYWNlYm9vayBncm91cCwgUmVkZGl0LCB0ZXh0IGdyb3VwPyIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAnT25lIGdyb3VwLCBGYWNlYm9vay4gQXVkaW8gZGVzY3JpcHRpb24sIGJsaW5kIG51bWJlciBncm91cCBpbiBGYWNlYm9vay4gIkkgYW0gbm90IGpvaW50ZXIsIHdoYXQgdG8gcGFydCBvZiBncm91cCwgZmluZCB0aGluZ3Mgb24gbXkgb3duLCB0d28gRmFjZWJvb2sgcGFnZSwgZm9yIEFwcGxlIEFjY2VzYmlsaXR5LCBhcHBsZXZpei5jb20sIHJldmlldyBpdCBhY2Nlc2JpbGlhYmxlLCB0ZW5kIHRvIGRvIG15LiAiJwogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImg0IiwKICAgICAgICB7IGF0dHJzOiB7IGlkOiAiaW50ZXJ2aWV3LXF1ZXN0aW9ucy1hbmQtcmVzcG9uc2UtaW50ZXJ2aWV3ZWUtYWxleCIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI2ludGVydmlldy1xdWVzdGlvbnMtYW5kLXJlc3BvbnNlLWludGVydmlld2VlLWFsZXgiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgSW50ZXJ2aWV3IFF1ZXN0aW9ucyBhbmQgUmVzcG9uc2UsIEludGVydmlld2VlOiBBbGV4IikKICAgICAgICBdCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlBlbmRpbmcsIHdpbGwgY29udGFjdC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImg0IiwgeyBhdHRyczogeyBpZDogIiIgfSB9LCBbCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAicmVzZWFyY2gtc3ludGhlc2lzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZXNlYXJjaC1zeW50aGVzaXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBSZXNlYXJjaCBTeW50aGVzaXMiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiVGhpcyBzZWN0aW9uIGlzIHByZWxpbWluYXJ5LCB3aWxsIGNvbnRpbnVlIHRvIHVwZGF0ZSBpbiBXZWVrIDgiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMyIsCiAgICAgICAgeyBhdHRyczogeyBpZDogImZldy1pbnNpZ2h0cy1mcm9tLXRoZS1pbnRlcnZpZXctcmVzZWFyY2gtZmluZGluZ3MiIH0gfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNmZXctaW5zaWdodHMtZnJvbS10aGUtaW50ZXJ2aWV3LXJlc2VhcmNoLWZpbmRpbmdzIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIEZldyBJbnNpZ2h0cyBmcm9tIHRoZSBJbnRlcnZpZXcgLyBSZXNlYXJjaCBGaW5kaW5ncyIpCiAgICAgICAgXQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlJlY2VpdmVkIHBvc2l0aXZlIGZlZWRiYWNrIGFib3V0IGNyZWF0aW5nIGEgY29tbXVuaXR5IGZvciBibGluZCBhbmQgdmlzaW9uLWltcGFpcmVkIHBlb3BsZSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJUcmFuc2Zvcm0gd2Vic2l0ZSB0byBNb2JpbGUgVmVyc2lvbiBtaWdodCBlYXNpZXIgZm9yIHNjcmVlbnJlYWRlciIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQZW9wbGUgbGlrZSBHdXMgbG92ZXMgdG8gZGlzY292ZXIgcmVzb3VyY2VzIG9uIHRoZWlyIG93biwgYnV0IHRoZXJlIGlzIGFsd2F5cyBvdGhlcnMgYXJlIG1vcmUgZGVwZW5kZW50LiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkb2N1bWVudC1pbnRlcnZpZXdzLWFuZC1pbnRlcnZpZXctcHJvY2VzcyIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZG9jdW1lbnQtaW50ZXJ2aWV3cy1hbmQtaW50ZXJ2aWV3LXByb2Nlc3MiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBEb2N1bWVudCBJbnRlcnZpZXdzIGFuZCBJbnRlcnZpZXcgUHJvY2VzcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJQbGVhc2UgZ28gYmFjayB0byB0aGUgbGFzdCBzZWN0aW9uIG9mOiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSW50ZXJ2aWV3IildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVGhlIGRldGFpbGVkIGluc2lnaHQgd2lsbCBiZSB1cGRhdGVkIGluIFdlZWsgOC4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkhvdyBtaWdodCB3ZSBmaWx0cmF0ZSBvbmxpbmUgYWRzIGFuZCBvdGhlciBkaXN0cmFjdGlvbnMgZm9yIHNjcmVlbnJlYWRlcj8iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJoMiIsCiAgICAgICAgewogICAgICAgICAgYXR0cnM6IHsgaWQ6ICJyZXZpZXctYW5kLW5vdGVzLW9mLWludGVydmlldy1kby1zLWFuZC1kb24tdHMtbm90ZXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBocmVmOiAiI3Jldmlldy1hbmQtbm90ZXMtb2YtaW50ZXJ2aWV3LWRvLXMtYW5kLWRvbi10cy1ub3RlcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBSZXZpZXcgYW5kIE5vdGVzIG9mIEludGVydmlldyBEbydzIGFuZCBEb24ndHMgTm90ZXMiKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQXNrIG9wZW4tZW5kZWQgcXVlc3Rpb25zIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQXNrIGFib3V0IGFjdHVhbCBiZWhhdmlvciIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkZvY3VzIG9uIFNwZWNpZmljIEluc3RhbmNlcyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIlB1c2ggUGVvcGxlIHRvIGZvY3VzIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgW192bS5fdigiQ291bGQgeW91IGhlbHAgbWUgdG8gc3VtbWFyaXplIHRoaXMgc2VudGVuY2U/IildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVXNlIFNjaWVuY2UiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBc2sgU2ltcGxlIFF1ZXN0aW9ucyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkFzayBXaHkgbW9yZSBvZnRlbiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkF2b2lkIGxlYWRpbmcgcXVlc3Rpb25zIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiQXZvaWQgYmVpbmcgdG8gc3BlY2lmaWMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBdm9pZCBQcmltZSBQZW9wbGUiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImJsb2NrcXVvdGUiLCBbCiAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEb24ndCB5b3UgbGlrZSB0aGlzIHdlYnNpdGU/IFRlbGwgbWUgYWJvdXQgdGhhdCB5b3UgdGhpbmsgYWJvdXQgdGhpcyB3ZWJzaXRlLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiR2VuZXJhbGl6ZTogRGlzY3VzcyBTcGVjaWZpYyBJbnN0YW5jZXMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJBdm9pZCBhc3N1bWluZyIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoIkF2b2lkIFNvbHV0aW9uIGZvciBvdGhlcnMuIildKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}